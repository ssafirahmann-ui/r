name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        run: |
          # Enable Remote Desktop and adjust RDP settings
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                             -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "SecurityLayer" -Value 0 -Force

          # Remove any existing firewall rule with same name to avoid duplication
          netsh advfirewall firewall delete rule name="RDP-Tailscale" || Write-Host "No previous rule to delete"
          
          # Allow incoming connection on port 3389
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389

          # Restart the Remote Desktop service
          Restart-Service -Name TermService -Force

      - name: Create RDP User with Password rdp12345 (try + fallback)
        shell: powershell
        run: |
          $password = "rdp12345"
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force

          # Remove existing user if present
          if (Get-LocalUser -Name "RDP" -ErrorAction SilentlyContinue) {
              Write-Host "Existing user 'RDP' found â€” removing..."
              try {
                  Remove-LocalUser -Name "RDP" -ErrorAction Stop
              } catch {
                  Write-Warning "Failed to remove existing user: $_"
              }
          }

          function Create-User {
              param($pwSecure)
              New-LocalUser -Name "RDP" -Password $pwSecure -AccountNeverExpires -ErrorAction Stop
              Add-LocalGroupMember -Group "Administrators" -Member "RDP"
              Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
          }

          try {
              Write-Host "Attempting to create user with password meeting your requested value..."
              Create-User -pwSecure $securePass
              Write-Host "User created successfully without changing policies."
          } catch {
              $ex = $_.Exception
              Write-Warning "Initial user creation failed: $ex"
              # If failure due to password complexity, attempt safe fallback
              if ($ex.GetType().Name -match "InvalidPasswordException" -or $ex.Message -match "password") {
                  Write-Warning "Password rejected by policy. Attempting temporary policy relax (fallback)."
                  
                  $exportCfg = "C:\Windows\Temp\secpol_orig.cfg"
                  $workCfg   = "C:\Windows\Temp\secpol_mod.cfg"
                  $backupCfg = "C:\Windows\Temp\secpol_backup.cfg"

                  # Export current security policy
                  secedit /export /cfg $exportCfg | Out-Null
                  Start-Sleep -Seconds 1

                  if (-not (Test-Path $exportCfg)) {
                      Write-Error "Failed to export local security policy. Cannot apply fallback."
                      exit 1
                  }

                  # Backup original
                  Copy-Item -Path $exportCfg -Destination $backupCfg -Force

                  # Read and modify policy: disable complexity and reduce min length
                  $content = Get-Content $exportCfg -Raw
                  # If the keys exist, replace; otherwise add them under [System Access]
                  if ($content -match "PasswordComplexity") {
                      $content = $content -replace "PasswordComplexity\s*=\s*\d", "PasswordComplexity = 0"
                  } else {
                      $content = $content -replace "\[System Access\]", "[System Access]`r`nPasswordComplexity = 0"
                  }
                  if ($content -match "MinimumPasswordLength") {
                      $content = $content -replace "MinimumPasswordLength\s*=\s*\d+", "MinimumPasswordLength = 1"
                  } else {
                      $content = $content -replace "\[System Access\]", "[System Access]`r`nMinimumPasswordLength = 1"
                  }

                  Set-Content -Path $workCfg -Value $content -Force

                  # Apply modified policy
                  secedit /configure /db C:\Windows\security\local.sdb /cfg $workCfg /areas SECURITYPOLICY | Out-Null
                  Start-Sleep -Seconds 2

                  # Try to create user again
                  try {
                      Create-User -pwSecure $securePass
                      Write-Host "User created successfully after temporary policy change."
                  } catch {
                      Write-Error "User creation still failed even after policy relax: $_"
                      # Attempt to restore original policy before exit
                      secedit /configure /db C:\Windows\security\local.sdb /cfg $backupCfg /areas SECURITYPOLICY | Out-Null
                      exit 1
                  } finally {
                      # Restore original security policy
                      secedit /configure /db C:\Windows\security\local.sdb /cfg $backupCfg /areas SECURITYPOLICY | Out-Null
                      Start-Sleep -Seconds 2
                      Write-Host "Original security policy restored."
                  }
              } else {
                  Write-Error "User creation failed for an unexpected reason: $ex"
                  exit 1
              }
          }

          # Final check
          if (-not (Get-LocalUser -Name "RDP" -ErrorAction SilentlyContinue)) {
              Write-Error "User creation ultimately failed."
              exit 1
          }

          # Save credentials to env for later steps
          echo "RDP_CREDS=User: RDP | Password: $password" >> $env:GITHUB_ENV
          Write-Host "RDP credentials written to environment."

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID
          
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Verify RDP Accessibility
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to RDP port 3389 failed"
              exit 1
          }
          Write-Host "TCP connectivity successful!"

      - name: Maintain Connection
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: RDP"
          Write-Host "Password: rdp12345"
          Write-Host "==================`n"
          
          while ($true) {
              Write-Host "[$(Get-Date)] RDP Active - Use Ctrl+C in workflow to terminate"
              Start-Sleep -Seconds 300
          }
